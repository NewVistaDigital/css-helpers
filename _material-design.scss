/// Gives a card depth effect.
/// @param {Number} $depth - depth level (between 1 and 5)
/// @link http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality Google Design
/// @requires {function} top-shadow
/// @requires {function} bottom-shadow
@mixin card($depth) {
  @if $depth < 1 {
    box-shadow: none;
  } @else if $depth > 5 {
    @warn "Invalid $depth: `#{$depth}` for the mixin: `card`.";
  } @else {
    box-shadow: bottom-shadow($depth), top-shadow($depth);
  }
}

/// Computes a top-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function top-shadow($depth) {
  $primary-offset: nth(1 3 10 14 19, $depth) * 1px;
  $blur: nth(3 6 20 28 38, $depth) * 1px;
  $color: rgba(black, nth(.12 .16 .19 .25 .30, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Computes a bottom-shadow for a card effect.
/// @param {Number} $depth - depth level
/// @return {List}
@function bottom-shadow($depth) {
  $primary-offset: nth(1 3 6 10 15, $depth) * 1px;
  $blur: nth(2 6 6 10 12, $depth) * 1px;
  $color: rgba(black, nth(.24 .23 .23 .22 .22, $depth));

  @return 0 $primary-offset $blur $color;
}

/// Creates a hover effect based on the depth
/// Add a transform to the hover for added depth
/// @example: transform: scaleX(1.1) scaleY(1.1); for $depth: 2
@mixin hover-card($depth) {
  @include card(1);
  transition: all .25s cubic-bezier(.25,.8,.25,1);
  
  @include hover {
    @include card($depth);
  }
  &:active {
    @include card(1);
    transition: all 25ms ease-in-out;
  }
}