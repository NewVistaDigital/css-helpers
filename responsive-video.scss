
@function __string-split($string, $delimiter: '', $guard: null, $args...) {
  @if $guard and __is-iteratee-call($string, $delimiter, $guard) {
    $delimiter: '';
  }

  @if not $delimiter
  or str-length($delimiter) == 0
  or $delimiter == '' {
    @return __to-list($string);
  }

  $delimiter-index: str-index($string, $delimiter);

  @if not $delimiter-index {
    @return append((), $string);
  }

  @return join(
    str-slice($string, 1, $delimiter-index - 1),
    __string-split(
        str-slice($string, $delimiter-index + str-length($delimiter)),
        $delimiter
    )
  );
}
/// Splits a string from indexes of `$delimiter` to a list.
@function _split($args...) {
  @return call('__string-split', $args...);
}


///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  @return if($minus, -$result, $result);;
}

// The mixin
//
// Default ratio is 16x9. Most common ratios are:
// 16x9, 4x3, 21x9
@mixin responsive-video($ratio: 16x9) {
  $ratio: _split("#{$ratio}", 'x');

  @if length($ratio) != 2 {
    @warn "$ratio: #{$ratio} has incorrect number of values. Check format follows: \"16x9\"";
  }
  position: relative;
  padding-bottom: (to-number(nth($ratio,2)) / to-number(nth($ratio,1)))*100%;
  padding-top: 25px;
  height: 0;
  iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
}